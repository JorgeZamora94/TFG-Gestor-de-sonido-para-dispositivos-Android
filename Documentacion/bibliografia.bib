@misc{ wiki:latex,
       author = "Wikipedia",
       title = "LaTeX --- Wikipedia{,} La enciclopedia libre",
       year = "2015",
       url = "https://es.wikipedia.org/w/index.php?title=LaTeX&oldid=84209252",
       note = "[Internet; descargado 30-septiembre-2015]"
}
@misc{noauthor_observer_2018,
	title = {Observer (patrón de diseño)},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://es.wikipedia.org/w/index.php?title=Observer_(patr%C3%B3n_de_dise%C3%B1o)&oldid=106530061},
	abstract = {Observador (en inglés: Observer) es un patrón de diseño de software que define una dependencia del tipo uno a muchos entre objetos, de manera que cuando uno de los objetos cambia su estado, notifica este cambio a todos los dependientes. Se trata de un patrón de comportamiento (existen de tres tipos: creación, estructurales y de comportamiento), por lo que está relacionado con algoritmos de funcionamiento y asignación de responsabilidades a clases y objetos.
Los patrones de comportamiento describen no solamente estructuras de relación entre objetos o clases sino también esquemas de comunicación entre ellos y se pueden clasificar en función de que trabajen con clases (método plantilla) u objetos (cadena de responsabilidad, comando, iterador, recuerdo, observador, estado, estrategia, visitante).
La variación de la encapsulación es la base de muchos patrones de comportamiento, por lo que cuando un aspecto de un programa cambia frecuentemente, estos patrones definen un objeto que encapsula dicho aspecto. Los patrones definen una clase abstracta que describe la encapsulación del objeto.
Este patrón también se conoce como el patrón de publicación-inscripción o modelo-patrón. Estos nombres sugieren las ideas básicas del patrón, que son: el objeto de datos, que se le puede llamar Sujeto a partir de ahora, contiene atributos mediante los cuales cualquier objeto observador o vista se puede suscribir a él pasándole una referencia a sí mismo. El Sujeto mantiene así una lista de las referencias a sus observadores. Los observadores a su vez están obligados a implementar unos métodos determinados mediante los cuales el Sujeto es capaz de notificar a sus observadores suscritos los cambios que sufre para que todos ellos tengan la oportunidad de refrescar el contenido representado. De manera que cuando se produce un cambio en el Sujeto, ejecutado, por ejemplo, por alguno de los observadores, el objeto de datos puede recorrer la lista de observadores avisando a cada uno. Este patrón suele utilizarse en los entornos de trabajo de interfaces gráficas orientados a objetos, en los que la forma de capturar los eventos es suscribir listeners a los objetos que pueden disparar eventos.
El patrón observador es la clave del patrón de arquitectura Modelo Vista Controlador (MVC).[1]​ De hecho el patrón fue implementado por primera vez en el MVC de Smalltalk basado en un entorno de trabajo de interfaz.[2]​ Este patrón está implementado en numerosos bibliotecas y sistemas, incluyendo todos los toolkits de GUI.
Patrones relacionados: publicador-subscriptor, mediador, singleton.},
	language = {es},
	urldate = {2018-04-23},
	journal = {Wikipedia, la enciclopedia libre},
	month = mar,
	year = {2018},
	note = {Page Version ID: 106530061}
}

@misc{noauthor_android_nodate,
	title = {Android {Design} {Patterns}: {The} {Observer} {Pattern}},
	shorttitle = {Android {Design} {Patterns}},
	url = {https://code.tutsplus.com/tutorials/android-design-patterns-the-observer-pattern--cms-28963},
	abstract = {What Is the Observer Pattern? The Observer Pattern is a software design pattern that establishes a one-to-many dependency between objects. Anytime the state of one of the objects (the "subject" or...},
	urldate = {2018-04-23},
	journal = {Code Envato Tuts+}
}

@misc{permisos,
	title = {Cómo solicitar permisos durante el tiempo de ejecución},
	url = {https://developer.android.com/training/permissions/requesting?hl=es-419},
	abstract = {Learn about runtime permissions and how they make it easier for users to install and upgrade your apps.},
	language = {es-419},
	urldate = {2018-09-11},
	journal = {Android Developers}
}

@misc{noauthor_zotero_nodate,
	title = {Zotero {\textbar} {Your} personal research assistant},
	url = {https://www.zotero.org/},
	urldate = {2018-09-11}
}

@misc{astudio,
	title = {Download {Android} {Studio} and {SDK} tools},
	url = {https://developer.android.com/studio/},
	abstract = {Download the official Android IDE and developer tools to build apps for Android phones, tablets, wearables, TVs, and more.},
	language = {en},
	urldate = {2018-09-11},
	journal = {Android Developers}
}

@misc{noauthor_java_nodate,
	title = {java - {Android} 6.0 multiple permissions},
	url = {https://stackoverflow.com/questions/34342816/android-6-0-multiple-permissions},
	urldate = {2018-10-21},
	journal = {Stack Overflow}
}

@misc{gobees,
	title = {Android app for monitoring bee hives activity. {Contribute} to davidmigloz/go-bees development by creating an account on {GitHub}},
	copyright = {GPL-3.0},
	url = {https://github.com/davidmigloz/go-bees},
	urldate = {2019-01-23},
	author = {Lozano, David Miguel},
	month = nov,
	year = {2018}
}

@misc{rock_calculando_2015,
	title = {Calculando la distancia entre dos coordenadas en {Java}},
	url = {https://donnierock.com/2015/03/16/calculando-la-distancia-entre-doos-coordenadas-en-java/},
	abstract = {Si no hace mucho os comenté por aquí cómo calcular la distancia entre dos puntos dadas sus coordenadas en MySQL (en ese artículo tenéis todo el tema del algoritmo para el cálculo más desarrollado, …},
	language = {es-ES},
	urldate = {2019-02-03},
	journal = {DonnierocK},
	author = {Rock, Donnie},
	month = mar,
	year = {2015}
}

@misc{toast,
	title = {Toasts overview},
	url = {https://developer.android.com/guide/topics/ui/notifiers/toasts},
	language = {en},
	urldate = {2019-02-12},
	journal = {Android Developers}
}

@misc{notificacion,
	title = {Notifications {Overview}},
	url = {https://developer.android.com/guide/topics/ui/notifiers/notifications},
	language = {en},
	urldate = {2019-02-12},
	journal = {Android Developers}
}

@misc{audiomanager,
	title = {{AudioManager}},
	url = {https://developer.android.com/reference/android/media/AudioManager},
	language = {en},
	urldate = {2019-02-12},
	journal = {Android Developers}
}

@misc{location,
	title = {Location and context overview},
	url = {https://developer.android.com/training/location/},
	language = {en},
	urldate = {2019-02-12},
	journal = {Android Developers}
}

@misc{stackoverflow,
	title = {Stack {Overflow} - {Where} {Developers} {Learn}, {Share}, \& {Build} {Careers}},
	url = {https://stackoverflow.com/},
	abstract = {Stack Overflow is the largest, most trusted online community for developers to learn, share​ ​their programming ​knowledge, and build their careers.},
	urldate = {2019-02-12},
	journal = {Stack Overflow}
}

@misc{udemy,
	title = {Programación de {Android} desde {Cero} +35 horas {Curso} {COMPLETO}},
	url = {https://www.udemy.com/programacion-de-android-desde-cero/},
	abstract = {Aprender a programar aplicaciones y juegos para Android de forma profesional y desde cero.},
	language = {es-es},
	urldate = {2019-02-12},
	journal = {Udemy}
}


@misc{nomolestar,
	title = {Limitar las interrupciones con el modo {No} molestar en {Android} - {Ayuda} de {Android}},
	url = {https://support.google.com/android/answer/9069335?hl=es},
	urldate = {2019-02-12}
}

@misc{noauthor_java_2019,
	title = {Java (lenguaje de programación)},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://es.wikipedia.org/w/index.php?title=Java_(lenguaje_de_programaci%C3%B3n)&oldid=113804839},
	abstract = {Java es un lenguaje de programación de propósito general, concurrente, orientado a objetos, que fue diseñado específicamente para tener tan pocas dependencias de implementación como fuera posible. Su intención es permitir que los desarrolladores de aplicaciones escriban el programa una vez y lo ejecuten en cualquier dispositivo (conocido en inglés como WORA, o "write once, run anywhere"), lo que quiere decir que el código que es ejecutado en una plataforma no tiene que ser recompilado para correr en otra. Java es, a partir de 2012, uno de los lenguajes de programación más populares en uso, particularmente para aplicaciones de cliente-servidor de web, con unos diez millones de usuarios reportados.[2]​[3]​
El lenguaje de programación Java fue originalmente desarrollado por James Gosling, de Sun Microsystems (constituida en 1982 y posteriormente adquirida el 27 de enero de 2010 por la compañía Oracle),[4]​ y publicado en 1995 como un componente fundamental de la plataforma Java de Sun Microsystems. Su sintaxis deriva en gran medida de C y C++, pero tiene menos utilidades de bajo nivel que cualquiera de ellos. Las aplicaciones de Java son compiladas a bytecode (clase Java), que puede ejecutarse en cualquier máquina virtual Java (JVM) sin importar la arquitectura de la computadora subyacente.
La compañía Sun desarrolló la implementación de referencia original para los compiladores de Java, máquinas virtuales y librerías de clases en 1991, y las publicó por primera vez en 1995. A partir de mayo de 2007, en cumplimiento de las especificaciones del Proceso de la Comunidad Java, Sun volvió a licenciar la mayoría de sus tecnologías de Java bajo la Licencia Pública General de GNU. Otros también han desarrollado implementaciones alternas a estas tecnologías de Sun, tales como el Compilador de Java de GNU y el GNU Classpath.},
	language = {es},
	urldate = {2019-02-12},
	journal = {Wikipedia, la enciclopedia libre},
	month = feb,
	year = {2019},
	note = {Page Version ID: 113804839}
}

@misc{agil,
	title = {Desarrollo ágil de software},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://es.wikipedia.org/w/index.php?title=Desarrollo_%C3%A1gil_de_software&oldid=109609657},
	abstract = {El desarrollo ágil de software envuelve un enfoque para la toma de decisiones en los proyectos de software, que se refiere a métodos de ingeniería del software basados en el desarrollo iterativo e incremental, donde los requisitos y soluciones evolucionan con el tiempo según la necesidad del proyecto. Así el trabajo es realizado mediante la colaboración de equipos auto-organizados y multidisciplinarios, inmersos en un proceso compartido de toma de decisiones a corto plazo. 
Cada iteración del ciclo de vida incluye: planificación, análisis de requisitos, diseño, codificación, pruebas y documentación. Teniendo gran importancia el concepto de "Finalizado" (Done), ya que el objetivo de cada iteración no es agregar toda la funcionalidad para justificar el lanzamiento del producto al mercado, sino incrementar el valor por medio de "software que funciona" (sin errores).
Los métodos ágiles enfatizan las comunicaciones cara a cara en vez de la documentación. La mayoría de los equipos ágiles están localizados en una simple oficina abierta, a veces llamadas "plataformas de lanzamiento" (bullpen en inglés). La oficina debe incluir revisores, escritores de documentación y ayuda, diseñadores de iteración y directores de proyecto. Los métodos ágiles también enfatizan que el software funcional es la primera medida del progreso. Combinado con la preferencia por las comunicaciones cara a cara, generalmente los métodos ágiles son criticados y tratados como "indisciplinados" por la falta de documentación técnica.},
	language = {es},
	urldate = {2019-02-12},
	journal = {Wikipedia, la enciclopedia libre},
	month = jul,
	year = {2018},
	note = {Page Version ID: 109609657}
}

@misc{noauthor_android_2019,
	title = {Android},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://es.wikipedia.org/w/index.php?title=Android&oldid=113910585},
	abstract = {Android es un sistema operativo basado en el núcleo Linux. Fue diseñado principalmente para dispositivos móviles con pantalla táctil, como teléfonos inteligentes, tabletas y también para relojes inteligentes, televisores y automóviles. Inicialmente fue desarrollado por Android Inc., empresa que Google respaldó económicamente y más tarde,  en 2005, compró.[3]​ Android fue presentado en 2007 junto la fundación del Open Handset Alliance (un consorcio de compañías de hardware, software y telecomunicaciones) para avanzar en los estándares abiertos de los dispositivos móviles.[4]​ El primer móvil con el sistema operativo Android fue el HTC Dream y se vendió en octubre de 2008.[5]​ Android es el segundo sistema operativo móvil más utilizado del mundo, con una cuota de mercado superior al 80 \% al año 2017, detrás de IOS.[6]​[7]​[8]​[9]​
El éxito del sistema operativo lo ha convertido en objeto de litigios sobre patentes en el marco de las llamadas guerras de patentes entre las empresas de teléfonos inteligentes.[10]​[11]​ Según los documentos secretos filtrados en 2013 y 2014, el sistema operativo es uno de los objetivos de las agencias de inteligencia internacionales.[12]​
La versión básica de Android es conocida como Android Open Source Project (AOSP).[13]​
El 25 de junio de 2014 en la Conferencia de Desarrolladores Google I/O, Google mostró una evolución de la marca Android, con el fin de unificar tanto el hardware como el software y ampliar mercados.
El 17 de mayo de 2017, se presentó Android Go. Una versión más ligera del sistema operativo para ayudar a que la mitad del mundo sin smartphone consiga uno en menos de cinco años. Incluye versiones especiales de sus aplicaciones donde el consumo de datos se reduce al máximo.[14]​},
	language = {es},
	urldate = {2019-02-12},
	journal = {Wikipedia, la enciclopedia libre},
	month = feb,
	year = {2019},
	note = {Page Version ID: 113910585}
}

@misc{noauthor_permissions_nodate,
	title = {Permissions overview},
	url = {https://developer.android.com/guide/topics/permissions/overview},
	language = {en},
	urldate = {2019-02-12},
	journal = {Android Developers}
}

@misc{orientacionobjetos,
	title = {Programación orientada a objetos},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://es.wikipedia.org/w/index.php?title=Programaci%C3%B3n_orientada_a_objetos&oldid=113748672},
	abstract = {La programación orientada a objetos (POO, u OOP según sus siglas en inglés) es un paradigma de programación que viene a innovar la forma de obtener resultados. Los objetos manipulan los datos de entrada para la obtención de datos de salida específicos, donde cada objeto ofrece una funcionalidad especial.
Muchos de los objetos prediseñados de los lenguajes de programación actuales permiten la agrupación en bibliotecas o librerías, sin embargo, muchos de estos lenguajes permiten al usuario la creación de sus propias bibliotecas.
Está basada en varias técnicas, incluyendo herencia, cohesión, abstracción, polimorfismo, acoplamiento y encapsulamiento.
Su uso se popularizó a principios de la década de 1990. En la actualidad, existe una gran variedad de lenguajes de programación que soportan la orientación a objetos.},
	language = {es},
	urldate = {2019-02-12},
	journal = {Wikipedia, la enciclopedia libre},
	month = feb,
	year = {2019},
	note = {Page Version ID: 113748672}
}

@misc{servicios,
	title = {Servicios},
	url = {https://developer.android.com/guide/components/services?hl=es-419},
	abstract = {A Service is an application component that can perform long-running operations in the background and does not provide a user interface. Another application component can start a service and it will continue to run in the background even if the user switches…},
	language = {es-419},
	urldate = {2019-02-12},
	journal = {Android Developers}
}

@misc{easycontent,
	title = {Easy integration with {Android}'s built-in and custom content providers data: {EverythingMe}/easy-content-providers},
	shorttitle = {Easy integration with {Android}'s built-in and custom content providers data},
	url = {https://github.com/EverythingMe/easy-content-providers},
	urldate = {2019-02-12},
	publisher = {EverythingMe},
	month = feb,
	year = {2019},
	note = {original-date: 2015-08-06T12:26:57Z}
}

@misc{wifimanager,
	title = {{WifiManager}  {\textbar}  {Android} {Developers}},
	url = {https://developer.android.com/reference/android/net/wifi/WifiManager},
	urldate = {2019-02-12}
}

@misc{netroken,
	title = {Netroken {Volume} {Control} 4.52 para {Android} - {Descargar}},
	url = {https://netroken-volume-control.uptodown.com/android},
	abstract = {Descargar Netroken Volume Control 4.52. Controla el volumen de tu dispositivo. Netroken Volume Control es una aplicación de control de volumen, gracias a la que podremos subir y bajar el volumen de distintos parámetros de nuestro terminal Android de forma independiente: el tono de llamada, el aviso de},
	language = {es},
	urldate = {2019-02-13},
	author = {SL, Uptodown Technologies}
}

@misc{developers,
	title = {Android {Developers}},
	url = {https://developer.android.com/?hl=es-419},
	abstract = {El sitio oficial para desarrolladores de apps donde encontrarás documentación de API y herramientas del SDK de Android.},
	language = {es-419},
	urldate = {2019-02-13},
	journal = {Android Developers},
	file = {Snapshot:C\:\\Users\\JorgeZM\\Zotero\\storage\\H93YNY8H\\developer.android.com.html:text/html}
}